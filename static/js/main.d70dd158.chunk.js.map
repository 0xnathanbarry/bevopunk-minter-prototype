{"version":3,"sources":["util/pinata.js","util/interact.js","Minter.js","App.js","reportWebVitals.js","index.js"],"names":["require","config","axios","pinJSONToIPFS","JSONBody","a","post","headers","pinata_api_key","process","pinata_secret_api_key","then","response","success","pinataUrl","data","IpfsHash","catch","error","console","log","message","contractABI","contractAddress","web3","createAlchemyWeb3","connectWallet","window","ethereum","request","method","addressArray","obj","status","address","target","href","getCurrentWalletConnected","length","mintNFT","url","name","description","trim","metadata","Object","image","pinataResponse","tokenURI","eth","Contract","contract","transactionParameters","to","from","selectedAddress","methods","encodeABI","params","txHash","Minter","props","useState","walletAddress","setWallet","setStatus","pressed","setPressed","setName","setDescription","setURL","addWalletListener","on","accounts","useEffect","connectWalletPressed","walletResponse","onMintPressed","className","id","onClick","String","substring","style","width","src","color","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d70dd158.chunk.js","sourcesContent":["require(\"dotenv\").config();\nconst key = process.env.REACT_APP_PINATA_KEY;\nconst secret = process.env.REACT_APP_PINATA_SECRET;\nconst axios = require(\"axios\");\n\nexport const pinJSONToIPFS = async (JSONBody) => {\n  const url = `https://api.pinata.cloud/pinning/pinJSONToIPFS`;\n  return axios\n    .post(url, JSONBody, {\n      headers: {\n        pinata_api_key: key,\n        pinata_secret_api_key: secret,\n      },\n    })\n    .then(function (response) {\n      return {\n        success: true,\n        pinataUrl:\n          \"https://gateway.pinata.cloud/ipfs/\" + response.data.IpfsHash,\n      };\n    })\n    .catch(function (error) {\n      console.log(error);\n      return {\n        success: false,\n        message: error.message,\n      };\n    });\n};\n","import { pinJSONToIPFS } from \"./pinata.js\";\nrequire(\"dotenv\").config();\nconst alchemyKey = process.env.REACT_APP_ALCHEMY_KEY;\nconst contractABI = require(\"../contract-abi.json\");\nconst contractAddress = \"0x4C4a07F737Bf57F6632B6CAB089B78f62385aCaE\";\nconst { createAlchemyWeb3 } = require(\"@alch/alchemy-web3\");\nconst web3 = createAlchemyWeb3(alchemyKey);\n\nexport const connectWallet = async () => {\n  if (window.ethereum) {\n    try {\n      const addressArray = await window.ethereum.request({\n        method: \"eth_requestAccounts\",\n      });\n      const obj = {\n        status: \"👆🏽 Write a message in the text-field above.\",\n        address: addressArray[0],\n      };\n      return obj;\n    } catch (err) {\n      return {\n        address: \"\",\n        status: \"😥 \" + err.message,\n      };\n    }\n  } else {\n    return {\n      address: \"\",\n      status: (\n        <span>\n          <p>\n            {\" \"}\n            🦊{\" \"}\n            <a target=\"_blank\" href={`https://metamask.io/download.html`}>\n              You must install Metamask, a virtual Ethereum wallet, in your\n              browser.\n            </a>\n          </p>\n        </span>\n      ),\n    };\n  }\n};\n\nexport const getCurrentWalletConnected = async () => {\n  if (window.ethereum) {\n    try {\n      const addressArray = await window.ethereum.request({\n        method: \"eth_accounts\",\n      });\n      if (addressArray.length > 0) {\n        return {\n          address: addressArray[0],\n          status: \"👆🏽 Click the button above to mint\",\n        };\n      } else {\n        return {\n          address: \"\",\n          status: \"🦊 Connect to Metamask using the top right button.\",\n        };\n      }\n    } catch (err) {\n      return {\n        address: \"\",\n        status: \"😥 \" + err.message,\n      };\n    }\n  } else {\n    return {\n      address: \"\",\n      status: (\n        <span>\n          <p>\n            {\" \"}\n            🦊{\" \"}\n            <a target=\"_blank\" href={`https://metamask.io/download.html`}>\n              You must install Metamask, a virtual Ethereum wallet, in your\n              browser.\n            </a>\n          </p>\n        </span>\n      ),\n    };\n  }\n};\n\nasync function loadContract() {\n  return new web3.eth.Contract(contractABI, contractAddress);\n}\n\nexport const mintNFT = async (url, name, description) => {\n  if (url.trim() == \"\" || name.trim() == \"\" || description.trim() == \"\") {\n    return {\n      success: false,\n      status: \"Didn't work. Dunno\",\n    };\n  }\n\n  //make metadata\n  const metadata = new Object();\n  metadata.name = name;\n  metadata.image = url;\n  metadata.description = description;\n\n  const pinataResponse = await pinJSONToIPFS(metadata);\n  if (!pinataResponse.success) {\n    return {\n      success: false,\n      status: \"😢 Something went wrong while uploading your tokenURI.\",\n    };\n  }\n  const tokenURI = pinataResponse.pinataUrl;\n\n  window.contract = await new web3.eth.Contract(contractABI, contractAddress);\n\n  const transactionParameters = {\n    to: contractAddress, // Required except during contract publications.\n    from: window.ethereum.selectedAddress, // must match user's active address.\n    data: window.contract.methods\n      .mintNFT(window.ethereum.selectedAddress, tokenURI)\n      .encodeABI(),\n  };\n\n  try {\n    const txHash = await window.ethereum.request({\n      method: \"eth_sendTransaction\",\n      params: [transactionParameters],\n    });\n    return {\n      success: true,\n      status:\n        \"✅ Check out your transaction on Poly: https://polygonscan.com/tx/\" +\n        txHash,\n    };\n  } catch (error) {\n    return {\n      success: false,\n      status: \"😥 Something went wrong: \" + error.message,\n    };\n  }\n};\n","import { useEffect, useState } from \"react\";\nimport {\n  connectWallet,\n  getCurrentWalletConnected,\n  mintNFT,\n} from \"./util/interact.js\";\n\nconst Minter = (props) => {\n  const [walletAddress, setWallet] = useState(\"\");\n  const [status, setStatus] = useState(\"\");\n  const [pressed, setPressed] = useState(false);\n\n  const [name, setName] = useState(\"Sriram Bevo\");\n  const [description, setDescription] = useState(\"A Sriram Bevo. Legendary\");\n  const [url, setURL] = useState(\n    \"https://gateway.pinata.cloud/ipfs/QmaVuhM7dkjxoe6mMVp1y5LRio4vef1vgHVbXsvDYxoRqs\"\n  );\n\n  useEffect(async () => {\n    const { address, status } = await getCurrentWalletConnected();\n\n    setWallet(address);\n    setStatus(status);\n\n    addWalletListener();\n  }, []);\n\n  function addWalletListener() {\n    if (window.ethereum) {\n      window.ethereum.on(\"accountsChanged\", (accounts) => {\n        if (accounts.length > 0) {\n          setWallet(accounts[0]);\n          setStatus(\"👆🏽 Write a message in the text-field above.\");\n        } else {\n          setWallet(\"\");\n          setStatus(\"🦊 Connect to Metamask using the top right button.\");\n        }\n      });\n    } else {\n      setStatus(\n        <p>\n          {\" \"}\n          🦊{\" \"}\n          <a target=\"_blank\" href={`https://metamask.io/download.html`}>\n            You must install Metamask, a virtual Ethereum wallet, in your\n            browser.\n          </a>\n        </p>\n      );\n    }\n  }\n\n  const connectWalletPressed = async () => {\n    const walletResponse = await connectWallet();\n    setStatus(walletResponse.status);\n    setWallet(walletResponse.address);\n  };\n\n  const onMintPressed = async () => {\n    const { success, status } = await mintNFT(url, name, description);\n    setStatus(status);\n    if (success) {\n      setName(\"\");\n      setDescription(\"\");\n      setURL(\"\");\n      setPressed(true);\n    }\n  };\n\n  return (\n    <div className=\"Minter\">\n      <button id=\"walletButton\" onClick={connectWalletPressed}>\n        {walletAddress.length > 0 ? (\n          \"Connected: \" +\n          String(walletAddress).substring(0, 6) +\n          \"...\" +\n          String(walletAddress).substring(38)\n        ) : (\n          <span>Connect Wallet</span>\n        )}\n      </button>\n\n      <br></br>\n      <h1 id=\"title\">BevoPunk Minter!</h1>\n      <p>Simply press \"Mint NFT\" to mint a BevoPunk!</p>\n\n      {!pressed ? (\n        <img style={{ width: \"50%\" }} src=\"bevoNFT5.png\" />\n      ) : (\n        <img style={{ width: \"50%\" }} src=\"bevoNFT4.png\" />\n      )}\n\n      <br></br>\n      <button id=\"mintButton\" onClick={onMintPressed}>\n        Mint NFT\n      </button>\n      <p id=\"status\" style={{ color: \"blue\" }}>\n        {status}\n      </p>\n    </div>\n  );\n};\n\nexport default Minter;\n","import './App.css';\nimport Minter from './Minter'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Minter></Minter>\n      \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}